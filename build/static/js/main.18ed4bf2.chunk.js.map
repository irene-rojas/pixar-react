{"version":3,"sources":["Timer/Timer.js","Questions/Questions.js","Results/Results.js","App.js","serviceWorker.js","index.js"],"names":["Timer","state","timer","startTimer","event","_this","setInterval","setState","props","handleTimerClick","stopTimer","clearInterval","timeOut","this","react_default","a","createElement","className","onClick","Component","answerChoices","id","text","answers","label","value","Questions","selectedOption","handleChange","handleClickInParent","_this2","map","question","key","react_select_esm","onChange","options","Results","totalTrue","totalFalse","App","showTimer","showQuestions","showResults","clickStart","preventDefault","handleFormSubmit","timerZero","callbackHandlerFunction","answerValue","console","log","src_Timer_Timer","src_Questions_Questions","src_Results_Results","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.18ed4bf2.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Timer extends Component {\n\n  state = {\n    timer: 60\n  };\n\n  startTimer = (event) => {\n    this.timer = setInterval(() => this.setState({\n      timer: this.state.timer - 1}), 1000); \n    // onClick, load Questions\n    this.props.handleTimerClick(event);\n   };\n\n  stopTimer = () => {\n    clearInterval(this.timer);\n    // console.log(\"Time's up!\");\n    this.props.timeOut();\n  };\n\n  shouldComponentUpdate() {\n    // console.log(this.state.timer);\n    if (this.state.timer <= 0) {\n      this.stopTimer();\n      return false;\n    }\n    return true;\n  };\n\n  componentWillUnmount() {\n    clearInterval(this.timer);\n  };\n\n  render() {\n    return (\n      <div className=\"Timer\">\n        <div>{this.state.timer} seconds</div>\n        <button onClick={this.startTimer}>Start!</button>\n      </div>\n    );\n  }\n}\n\nexport default Timer;\n","import React, { Component } from \"react\";\nimport Select from \"react-select\";\nimport \"./Questions.css\";\n\nconst answerChoices = [\n    {\n        id: 1,\n        text: \"1. The background image is the carpet from Sid's house in Toy Story. What movie inspired it?\",\n        answers: [\n            {\n                label: \"2001: A Space Odyssey\",\n                value: false\n            },\n            {\n                label: \"The Shining\",\n                value: true\n            },\n            {\n                label: \"One Flew Over the Cuckoo's Nest\",\n                value: false\n            },\n            {\n                label: \"The Godfather\",\n                value: false\n            }\n            ]\n    },\n    {\n        id: 2,\n        text: \"2. What is the name of the studio’s mascot?\",\n        answers: [\n            {\n                label: \"Luxo Ball\",\n                value: false\n            },\n            { \n                label: \"Luxo\",\n                value: false\n            },\n            {\n                label: \"Luxo, Jr.\",\n                value: true\n            },\n            {\n                label: \"Tinny\",\n                value: false\n            }\n            ]\n    },\n    {\n        id: 3,\n        text: \"3. What was the first Pixar movie shown in 3D?\",\n        answers: [\n            {\n                label: \"Up\",\n                value: true\n            },\n            { \n                label: \"A Bug's Life\",\n                value: false\n            },\n            {\n                label: \"Toy Story 2\",\n                value: false\n            },\n            {\n                label: \"Tinny\",\n                value: false\n            }\n            ]\n    },\n    {\n        id: 4,\n        text: \"4. What was the first Pixar movie to receive a PG rating?\",\n        answers: [\n            {\n                label: \"Brave\",\n                value: false\n            },\n            { \n                label: \"Inside Out\",\n                value: false\n            },\n            {\n                label: \"Up\",\n                value: false\n            },\n            {\n                label: \"The Incredibles\",\n                value: true\n            }\n            ]\n    },\n    {\n        id: 5,\n        text: \"5. Which actor turned down the role of Buzz Lightyear, but later voiced another Pixar character?\",\n        answers: [\n            {\n                label: \"Albert Brooks\",\n                value: false\n            },\n            { \n                label: \"Billy Crystal\",\n                value: true\n            },\n            {\n                label: \"John Ratzenberger\",\n                value: false\n            },\n            {\n                label: \"John Goodman\",\n                value: false\n            }\n            ]\n    },\n    {\n        id: 6,\n        text: \"6. When did Disney acquire Pixar?\",\n        answers: [\n            {\n                label: \"2004\",\n                value: false\n            },\n            { \n                label: \"2005\",\n                value: false\n            },\n            {\n                label: \"2006\",\n                value: true\n            },\n            {\n                label: \"2007\",\n                value: false\n            }\n            ]\n    },\n    {\n        id: 7,\n        text: \"7. What’s the final word of “Monsters, Inc”?\",\n        answers: [\n            {\n                label: \"Boo\",\n                value: false\n            },\n            { \n                label: \"Kitty\",\n                value: true\n            }\n            ]\n    },\n    {\n        id: 8,\n        text: \"8. Who was the original voice of Marlin from “Finding Nemo”?\",\n        answers: [\n            {\n                label: \"Albert Brooks\",\n                value: false\n            },\n            { \n                label: \"Denis Leary\",\n                value: false\n            },\n            {\n                label: \"Brad Garrett\",\n                value: false\n            },\n            {\n                label: \"William H. Macy\",\n                value: true\n            }\n            ]\n    }\n];\n\n\nclass Questions extends Component {\n\n    state = {\n        answerChoices,\n        selectedOption: null,\n    }\n\n    handleChange = (selectedOption) => {\n        this.props.handleClickInParent(selectedOption);\n      }\n\n    render() {\n        // const { selectedOption } = this.state;\n        return (\n\n            <div className=\"questionsDiv\">\n\n                <ol>\n                    {this.state.answerChoices.map(question => {\n                    return (\n\n                        <div className=\"individualQuestions\" key={question.id}>\n\n                            {question.text}\n                            \n                            <Select\n                                value={this.selectedOption}\n                                onChange={this.handleChange}\n                                options={question.answers}\n                            />\n\n                        </div>\n                        \n                        )  \n                    })}\n                </ol>\n\n            </div>\n\n        )\n    }\n\n}\n\nexport default Questions;","import React from \"react\";\n\nconst Results = (props) => {\n    return (\n        <div className=\"masterResultsDiv\">\n\n            <div>\n                Correct: {props.totalTrue}\n            </div>\n\n            <div>\n                Wrong: {props.totalFalse}\n            </div>\n\n        </div>\n            )\n}\n\nexport default Results;","import React, { Component } from 'react';\nimport './App.css';\nimport Timer from \"./Timer\";\nimport Questions from \"./Questions/Questions.js\";\nimport Results from \"../src/Results\";\n\nclass App extends Component {\n\n    state = {\n        totalTrue: 0,\n        totalFalse: 0,\n        showTimer: true,\n        showQuestions: false,\n        showResults: false,\n    }\n\n    clickStart = (event) => {\n        event.preventDefault();\n        // console.log(\"start button clicked\");\n        this.setState(\n            {showQuestions: true}\n        )\n    }\n\n    // submit button\n    handleFormSubmit = (event) => {\n        event.preventDefault();\n        // console.log(\"submit button clicked\");\n        this.setState(\n            {showResults: true,\n            showQuestions: false,\n            showTimer: false}\n            // timer still appears in resultsDiv\n        )\n    };\n\n    timerZero = () => this.setState(\n        {showResults: true,\n        showQuestions: false,\n        showTimer: false}\n    )\n\n    callbackHandlerFunction = ( selectedOption ) => {\n        const answerValue = selectedOption.value;\n        if (answerValue === true) {\n            this.setState({totalTrue: this.state.totalTrue + 1}, () => {\n                console.log(\"Pixar\");\n            });\n        };\n        if (answerValue === false) {\n            this.setState({totalFalse: this.state.totalFalse + 1}, () => {\n                console.log(\"Pixar\");\n            });\n        };\n      } \n\n  render() {\n    return (\n\n      <div className=\"parallax\">\n\n        <div className=\"App\">\n\n            <div className=\"wrapper\">\n\n            <div className=\"headerDiv\">\n                <h1>Pixar Trivia!</h1>\n            </div>\n\n            {this.state.showTimer && \n            <div className=\"timerDiv\">\n                <Timer \n                handleTimerClick={this.clickStart}\n                timeOut={this.timerZero}\n                />   \n            </div>\n            }\n\n            {this.state.showQuestions &&\n            <div className=\"questionSection\">\n                <Questions \n                    handleClickInParent={this.callbackHandlerFunction}\n                />\n\n                <div>\n                    <button onClick={this.handleFormSubmit}>Submit</button>\n                </div>\n            </div>\n            }\n\n            {this.state.showResults && \n            <div className=\"resultsDiv\">\n                <Results \n                    totalTrue={this.state.totalTrue}\n                    totalFalse={this.state.totalFalse}\n                />\n            </div>\n            }\n\n            </div>\n\n        </div>\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}